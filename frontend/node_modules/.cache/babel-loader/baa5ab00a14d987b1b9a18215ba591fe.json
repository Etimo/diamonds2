{"ast":null,"code":"var _jsxFileName = \"/Users/admin/projects/diamonds2/frontend/src/components/GameBoard.js\";\nimport React from \"react\";\nimport _ from \"lodash\";\nimport Board from \"../blocks/Board\";\nimport { base, botBaseDiamond, botBase, diamond, diamondRed, botDiamond, robot, teleporter, wall, redButton } from \"../images\";\nexport default (function (_ref) {\n  var rows = _ref.rows;\n\n  var decideCharacter = function decideCharacter(content) {\n    var goImgMap = {\n      Teleporter: teleporter,\n      Wall: wall,\n      DiamondButton: redButton\n    };\n\n    if (_.has(content, \"botName\") && _.has(content, \"base\") && _.has(content, \"diamond\")) {\n      return botBaseDiamond;\n    } else if (_.has(content, \"botName\") && _.has(content, \"base\")) {\n      return botBase;\n    } else if (_.has(content, \"botName\") && _.has(content, \"diamond\")) {\n      return botDiamond;\n    } else if (_.has(content, \"base\")) {\n      return base;\n    } else if (_.has(content, \"botName\")) {\n      return robot;\n    } else if (_.has(content, \"diamond\")) {\n      return content.points === 1 ? diamond : diamondRed;\n    } else if (_.has(content, \"go\")) {\n      return goImgMap[content.goName];\n    } else {\n      return null;\n    }\n  };\n\n  var decideCharacterName = function decideCharacterName(content) {\n    if (_.has(content, \"botName\")) {\n      return content.botName;\n    } else if (_.has(content, \"base\")) {\n      return content.base;\n    } else {\n      return null;\n    }\n  };\n\n  var width = rows.length;\n  var bigCellSize = (90 / width).toFixed(2);\n  var smallCellSize = (60 / width).toFixed(2);\n  return React.createElement(Board, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, rows.map(function (cells, key) {\n    return React.createElement(Board.Row, {\n      key: key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, cells.map(function (content, key) {\n      var character = decideCharacter(content);\n      var characterName = decideCharacterName(content);\n      var shouldRotate = content.goName === \"Teleporter\" ? 1 : 0;\n      return React.createElement(Board.Cell, {\n        key: key,\n        bigCellSize: bigCellSize,\n        smallCellSize: smallCellSize,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, characterName && React.createElement(Board.CharacterName, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, characterName), character && React.createElement(Board.CharacterImg, {\n        alt: \"player\",\n        src: character,\n        rotate: shouldRotate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }));\n    }));\n  }));\n});","map":{"version":3,"sources":["/Users/admin/projects/diamonds2/frontend/src/components/GameBoard.js"],"names":["React","_","Board","base","botBaseDiamond","botBase","diamond","diamondRed","botDiamond","robot","teleporter","wall","redButton","rows","decideCharacter","content","goImgMap","Teleporter","Wall","DiamondButton","has","points","goName","decideCharacterName","botName","width","length","bigCellSize","toFixed","smallCellSize","map","cells","key","character","characterName","shouldRotate"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport Board from \"../blocks/Board\";\nimport {\n  base,\n  botBaseDiamond,\n  botBase,\n  diamond,\n  diamondRed,\n  botDiamond,\n  robot,\n  teleporter,\n  wall,\n  redButton\n} from \"../images\";\n\nexport default ({ rows }) => {\n  const decideCharacter = content => {\n    const goImgMap = {\n      Teleporter: teleporter,\n      Wall: wall,\n      DiamondButton: redButton\n    };\n\n    if (\n      _.has(content, \"botName\") &&\n      _.has(content, \"base\") &&\n      _.has(content, \"diamond\")\n    ) {\n      return botBaseDiamond;\n    } else if (_.has(content, \"botName\") && _.has(content, \"base\")) {\n      return botBase;\n    } else if (_.has(content, \"botName\") && _.has(content, \"diamond\")) {\n      return botDiamond;\n    } else if (_.has(content, \"base\")) {\n      return base;\n    } else if (_.has(content, \"botName\")) {\n      return robot;\n    } else if (_.has(content, \"diamond\")) {\n      return content.points === 1 ? diamond : diamondRed;\n    } else if (_.has(content, \"go\")) {\n      return goImgMap[content.goName];\n    } else {\n      return null;\n    }\n  };\n\n  const decideCharacterName = content => {\n    if (_.has(content, \"botName\")) {\n      return content.botName;\n    } else if (_.has(content, \"base\")) {\n      return content.base;\n    } else {\n      return null;\n    }\n  };\n\n  const width = rows.length;\n  const bigCellSize = (90 / width).toFixed(2);\n  const smallCellSize = (60 / width).toFixed(2);\n\n  return (\n    <Board>\n      {rows.map((cells, key) => {\n        return (\n          <Board.Row key={key}>\n            {cells.map((content, key) => {\n              const character = decideCharacter(content);\n              const characterName = decideCharacterName(content);\n              const shouldRotate = content.goName === \"Teleporter\" ? 1 : 0;\n\n              return (\n                <Board.Cell\n                  key={key}\n                  bigCellSize={bigCellSize}\n                  smallCellSize={smallCellSize}\n                >\n                  {characterName && (\n                    <Board.CharacterName>{characterName}</Board.CharacterName>\n                  )}\n                  {character && (\n                    <Board.CharacterImg\n                      alt=\"player\"\n                      src={character}\n                      rotate={shouldRotate}\n                    />\n                  )}\n                </Board.Cell>\n              );\n            })}\n          </Board.Row>\n        );\n      })}\n    </Board>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"/Users/admin/projects/diamonds2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/admin/projects/diamonds2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { useState, useEffect } from \"react\";\nimport useFetchRepeatedly from \"./useFetchRepeatedly\";\nimport _ from \"lodash\";\n\nvar createBoard = function createBoard(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      bots = _ref.bots,\n      gameObjects = _ref.gameObjects,\n      diamonds = _ref.diamonds;\n  var rows = [];\n\n  for (var y = 0; y < height; y++) {\n    rows.push([]);\n\n    for (var x = 0; x < width; x++) {\n      rows[y][x] = {};\n    }\n  } // Insert bots into board\n\n\n  bots.forEach(function (bot) {\n    rows[bot.position.y][bot.position.x] = _objectSpread({}, rows[bot.position.y][bot.position.x], {\n      botName: bot.name\n    });\n    rows[bot.base.y][bot.base.x] = _objectSpread({}, rows[bot.base.y][bot.base.x], {\n      base: bot.name\n    });\n  }); // Insert diamonds into board\n\n  diamonds.forEach(function (diamond) {\n    rows[diamond.y][diamond.x] = _objectSpread({}, rows[diamond.y][diamond.x], {\n      diamond: true,\n      points: diamond.points\n    });\n  }); // Insert gameObjects into board\n\n  gameObjects.forEach(function (go) {\n    rows[go.position.y][go.position.x] = _objectSpread({}, rows[go.position.y][go.position.x], {\n      goName: go.name,\n      go: true\n    });\n  });\n  return rows;\n};\n\nexport default (function (url, delay) {\n  var _useState = useState([[]]),\n      _useState2 = _slicedToArray(_useState, 2),\n      rows = _useState2[0],\n      setRows = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      bots = _useState4[0],\n      setBots = _useState4[1];\n\n  var boardData = useFetchRepeatedly(url, delay, {});\n  useEffect(function () {\n    if (!_.isEmpty(boardData)) {\n      setRows(createBoard(boardData));\n      setBots(boardData.bots);\n    }\n  }, [boardData]);\n  return [rows, bots];\n});","map":{"version":3,"sources":["/Users/admin/projects/diamonds2/frontend/src/hooks/useBoard.js"],"names":["useState","useEffect","useFetchRepeatedly","_","createBoard","width","height","bots","gameObjects","diamonds","rows","y","push","x","forEach","bot","position","botName","name","base","diamond","points","go","goName","url","delay","setRows","setBots","boardData","isEmpty"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport useFetchRepeatedly from \"./useFetchRepeatedly\";\nimport _ from \"lodash\";\n\nconst createBoard = ({ width, height, bots, gameObjects, diamonds }) => {\n  const rows = [];\n  for (let y = 0; y < height; y++) {\n    rows.push([]);\n    for (let x = 0; x < width; x++) {\n      rows[y][x] = {};\n    }\n  }\n\n  // Insert bots into board\n  bots.forEach(bot => {\n    rows[bot.position.y][bot.position.x] = {\n      ...rows[bot.position.y][bot.position.x],\n      botName: bot.name\n    };\n    rows[bot.base.y][bot.base.x] = {\n      ...rows[bot.base.y][bot.base.x],\n      base: bot.name\n    };\n  });\n\n  // Insert diamonds into board\n  diamonds.forEach(diamond => {\n    rows[diamond.y][diamond.x] = {\n      ...rows[diamond.y][diamond.x],\n      diamond: true,\n      points: diamond.points\n    };\n  });\n\n  // Insert gameObjects into board\n  gameObjects.forEach(go => {\n    rows[go.position.y][go.position.x] = {\n      ...rows[go.position.y][go.position.x],\n      goName: go.name,\n      go: true\n    };\n  });\n\n  return rows;\n};\n\nexport default (url, delay) => {\n  const [rows, setRows] = useState([[]]);\n  const [bots, setBots] = useState([]);\n  const boardData = useFetchRepeatedly(url, delay, {});\n\n  useEffect(() => {\n    if (!_.isEmpty(boardData)) {\n      setRows(createBoard(boardData));\n      setBots(boardData.bots);\n    }\n  }, [boardData]);\n\n  return [rows, bots];\n};\n"]},"metadata":{},"sourceType":"module"}
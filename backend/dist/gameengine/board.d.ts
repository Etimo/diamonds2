import { AbstractGameObject } from "./gameobjects/abstract-game-object";
import { IBot } from "src/interfaces/bot.interface";
import { AbstractGameObjectProvider } from "./gameobjects/abstract-game-object-providers";
import { BoardConfig } from "./board-config";
import { IPosition } from "../common/interfaces/position.interface";
export declare class Board {
    protected config: BoardConfig;
    protected gameObjectProviders: AbstractGameObjectProvider[];
    protected logger: any;
    private static nextId;
    private readonly _id;
    private bots;
    private gameObjects;
    readonly maxNumberOfCarryingDiamonds: number;
    private callbackLoopsRegistered;
    private callbackLoopsId;
    highscoreCallback: any;
    constructor(config: BoardConfig, gameObjectProviders: AbstractGameObjectProvider[], logger: any);
    getId(): string;
    registerSessionFinishedCallback(callback: Function): void;
    join(bot: IBot): Promise<boolean>;
    getBot(token: string): IBot;
    move(bot: IBot, delta: IPosition): Promise<boolean>;
    private createNewExpirationTimer;
    isCellEmpty(x: number, y: number): boolean;
    registerGameObjectForCallbackLoop(gameObject: AbstractGameObject, interval: number): void;
    unregisterGameObjectFromCallbackLoop(gameObject: AbstractGameObject, interval: number): void;
    getEmptyPosition(): IPosition;
    getRandomPosition(): IPosition;
    getConfig(): BoardConfig;
    get width(): number;
    get height(): number;
    getAllGameObjects(): AbstractGameObject[];
    getAllGameObjectProviders(): AbstractGameObjectProvider[];
    addGameObjects(gameObjects: AbstractGameObject[]): void;
    getGameObjectOnPosition(p: IPosition): AbstractGameObject[];
    trySetGameObjectPosition(gameObject: AbstractGameObject, dest: IPosition, skipLeaveCheck?: boolean, skipEnterCheck?: boolean): boolean;
    canGameObjectEnter(gameObject: AbstractGameObject, dest: IPosition): boolean;
    canGameObjectLeave(gameObject: AbstractGameObject, dest: IPosition): boolean;
    getGameObjectsByType<T extends AbstractGameObject>(t: new (...args: any[]) => T): T[];
    removeGameObject(gameObject: AbstractGameObject): void;
    removeGameObjectsByType<T extends AbstractGameObject>(t: new (...args: any[]) => T): void;
    private notifyProvidersGameObjectsRemoved;
    getLogString(gameObjects: AbstractGameObject[]): string;
    private notifyProvidersGameObjectsAdded;
    private notifyProvidersBoardInitialized;
    private notifyProvidersBoardBotJoined;
    private destinationIsOutOfBounds;
    notifyGameObjectEvent(sender: AbstractGameObject, message: string, payload?: Object): void;
}

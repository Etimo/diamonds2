"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const copyfiles = require("copyfiles");
const path_1 = require("path");
const get_value_or_default_1 = require("./helpers/get-value-or-default");
class AssetsManager {
    copyAssets(configuration, appName, outDir) {
        return __awaiter(this, void 0, void 0, function* () {
            const assets = get_value_or_default_1.getValueOrDefault(configuration, 'compilerOptions.assets', appName) || [];
            if (assets.length <= 0) {
                return;
            }
            try {
                let sourceRoot = get_value_or_default_1.getValueOrDefault(configuration, 'sourceRoot', appName);
                sourceRoot = path_1.join(process.cwd(), sourceRoot);
                const filesToCopy = assets.map(item => {
                    if (typeof item === 'string') {
                        return {
                            glob: path_1.join(sourceRoot, item),
                            outDir,
                        };
                    }
                    return {
                        outDir: item.outDir || outDir,
                        glob: path_1.join(sourceRoot, item.include),
                        exclude: item.exclude ? path_1.join(sourceRoot, item.exclude) : undefined,
                        flat: item.flat,
                    };
                });
                const copyFiles = (item) => new Promise((resolve, reject) => copyfiles([item.glob, item.outDir], {
                    exclude: item.exclude,
                    flat: item.flat,
                    up: sourceRoot.split(path_1.sep).length,
                    all: true,
                }, (err) => (err ? reject(err) : resolve())));
                yield Promise.all(filesToCopy.map(copyFiles));
            }
            catch (err) {
                throw new Error(`An error occurred during the assets copying process. ${err.message}`);
            }
        });
    }
}
exports.AssetsManager = AssetsManager;

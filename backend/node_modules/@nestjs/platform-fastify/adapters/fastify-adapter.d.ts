import { RequestMethod } from '@nestjs/common';
import { CorsOptions } from '@nestjs/common/interfaces/external/cors-options.interface';
import { NestApplicationOptions } from '@nestjs/common/interfaces/nest-application-options.interface';
import { AbstractHttpAdapter } from '@nestjs/core/adapters/http-adapter';
import * as fastify from 'fastify';
export declare class FastifyAdapter<TInstance = any> extends AbstractHttpAdapter {
    constructor(instanceOrOptions?: TInstance | fastify.ServerOptions | fastify.ServerOptionsAsHttp | fastify.ServerOptionsAsHttp2 | fastify.ServerOptionsAsSecure | fastify.ServerOptionsAsSecureHttp | fastify.ServerOptionsAsSecureHttp2);
    listen(port: string | number, callback?: () => void): any;
    listen(port: string | number, hostname: string, callback?: () => void): any;
    reply(response: any, body: any, statusCode?: number): any;
    status(response: any, statusCode: number): any;
    render(response: any, view: string, options: any): any;
    redirect(response: any, statusCode: number, url: string): any;
    setErrorHandler(handler: Parameters<fastify.FastifyInstance['setErrorHandler']>[0], prefix?: string): any;
    setNotFoundHandler(handler: Parameters<fastify.FastifyInstance['setNotFoundHandler']>[0], prefix?: string): any;
    getHttpServer<TServer = any>(): TServer;
    getInstance<TServer = any>(): TServer;
    register(...args: any[]): any;
    inject(...args: any[]): any;
    close(): any;
    initHttpServer(options: NestApplicationOptions): void;
    useStaticAssets(options: {
        root: string;
        prefix?: string;
        setHeaders?: Function;
        send?: any;
    }): any;
    setViewEngine(options: any): any;
    setHeader(response: any, name: string, value: string): any;
    getRequestHostname(request: any): string;
    getRequestMethod(request: any): string;
    getRequestUrl(request: any): string;
    enableCors(options: CorsOptions): void;
    registerParserMiddleware(): void;
    createMiddlewareFactory(requestMethod: RequestMethod): (path: string, callback: Function) => any;
    getType(): string;
    protected registerWithPrefix<T extends fastify.Plugin<any, any, any, any>>(factory: T, prefix?: string): ReturnType<fastify.FastifyInstance['register']>;
}
